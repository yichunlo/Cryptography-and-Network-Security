from sympy import *
from Crypto.Cipher import AES
import binascii
from scapy.layers.tls.crypto import prf

def is_square(n):
	return type(sqrt(n)) == Integer

def fermat_factor(n):
	global p
	global q
	num_digits = int(log(n, 10).evalf() + 1)
	a = ceiling( sqrt(n).evalf(num_digits) )
	counter = 0
	b = 0
	while not is_square(a*a - n):
		a += 1
		counter += 1
	b = sqrt(a*a - n)
	p = a+b
	q = a-b

def val_to_string(target):
	flag = ""
	bi = [1, 2, 4, 8, 16, 32, 64, 128]
	counter = 0
	c = 0
	while target != 0:
		c += (target % 2) * bi[counter]
		counter += 1
		target //= 2
		if counter == 8:
			flag += chr(c)
			c = 0
			counter = 0
	flag += "C"
	return flag[::-1]

random_c = "a21ee774bcdba8cb0f2cd005d026bc04d33c4e1555728480ca882cc98a073029"
random_s = "6bbe955a99e1e5c8be5b7cf13132bcabd8a50eda2f78add9444f574e47524401"

random_s2 = "4d5252ebadd1656f1a9981b77a9d1cefd3f326943bca8988444f574e47524401"
random_c2 = "4fd1db47821ec055970461590cb20671fdbfbbc96cf25dd118615c2da8ac4b1d"

n_16 = "6d688e5dc22796188fe5e1c5ced9d84908aaa291fa5e422bccf564fb80bd323953e7fbc56e4e8324f55f0732923431eeccb76d532f69e229d401184526983aebe8d968cb2a98bda140ccfbd59e97a928e0c3b3a73f89d22c0e40fe1a63b0e9d8798baf53a50df7e9f341d0fd6ba55cafac19b416eb0e42e36441eac01616bbdf6a13bc1b044c0fe47056a6494aa7d4fe07b9a4dfb1f66c175039ebc17cfb501a61aa08d78a96ae0e371f5fca2f875ccda34e11542fc92b0f4508d69c9cd791882e878d1d2d0ce80699ebfb40bd0ad7f0bdc001706ac51866d1c445b6eb090018bc8e600f9280f35a8adf4227a8a94a67a6eb96fd3bbc7a62cbb3da4fb1bf9e45"
e = 65537
n = int(n_16, 16)
p = 0
q = 0
fermat_factor(n)
print("p =", p)
print("")
print("q =", q)
fi_n = (p-1) * (q-1)
d = mod_inverse(e, fi_n)
encrypted_preMaster = "4325d6f3298e565e573efa1a1e4f19a03b0df7ece2a66e078446aeec4409f151ca669b56e8c73790ddb5834cdd63f2f5b0d2666037fc9b6a7a6561f4d234ccd86e5435fce16d8924af557f548e5edf376aa7421c96647f3f5d2d200d1219f1077530d7a717b6c4b4b723c33bbb4adbcb26ac2c67fc379c5e96c8f7c1ffa5c7b4489189e7eddf1fbf53ea4ed28c0bc15109ca71dd5ce2beaae32f8bf07579042c9075c9f85fb99ef6e45a8fe31112870d2749c6554ec820738e8c2747fab1cfa2f5fc77b9e72133343da8190af82829c2cb0bd3a2effe16ae7634d1b218421620e291d116b60cd795b85803c834c114cc6f57d1a6e3467dda3240f865810516c3"
encrypted_preMaster2 = "5011ea7c3bc7c4558f7423130b30e2ec04c94e1aadb940bf89e6d2a4c213d66c03d2b51133f09ef060a180b0c5837c6707120b61e1eeb617df4ffc5292e91f6745f71aaffbd3e5607c573fc0ec047c7ba2922deb1999e7a619907da8296bcee35af071ff9c3e44f3276ec35b9a65f7c7a4e5b48d36f0b2fd7d9b84310ce8eb2fbe043379a317d771d80ff3f241d6ff8e32389f7470536c42d114c7120780603a620ca52e3cc60810874bbb08c2dead23004b2c0c8ded60d1ea3dc5137669f18c152ea1e70c44b086a931ea9c1e33aa3a23db7fe2bce46d63e36637966e06b2f28cdfe6f600464e99181bb0297c0d3e603c31252a5a496db000d6478efdbcea59"

pre = int(encrypted_preMaster, 16)
pre_Master = pow(pre, d, n)

pre2 = int(encrypted_preMaster2, 16)
pre_Master2 = pow(pre2, d, n)
print("")

pre_Master = hex(pre_Master)
pre_Master = pre_Master[-96:]

pre_Master2 = hex(pre_Master2)[-96:]

PRF = prf.PRF()

Master = PRF.compute_master_secret(bytes.fromhex(pre_Master), bytes.fromhex(random_c), bytes.fromhex(random_s))
key_block = PRF.derive_key_block(Master, bytes.fromhex(random_s), bytes.fromhex(random_c), 72) # 20, 20, 16, 16
key = key_block[-16:] # server write

Master2 = PRF.compute_master_secret(bytes.fromhex(pre_Master2), bytes.fromhex(random_c2), bytes.fromhex(random_s2))
block = PRF.derive_key_block(Master2, bytes.fromhex(random_s2), bytes.fromhex(random_c2), 72)
key2 = block[-16:]

cipher = "f367c0323cf9425f8bc4319497306b3fb07eb728a6805ddeabd122f3c369c67b4c232c9b30d4c1b2667fe560409dec1b2adca362b851d1e73eb4553ff817d198d9242a761e78fbe39fed99940797d924"
cipher_two = "a117f2cfea7f30b4059935185547961a1414820aa05a1b1418a256b7fd278b311073bbacd5699a25bcb9991b1c94b157cdb7d6f28e82a0826af2fd6883ad74e6a921443b4ce01cbce23af1bed75e304af17aa549524c15ca323f02604fd50c9800fb9ff4d5be53982e14d4715e7ce3b4007c199f8ed9cf4aa9880265b5e0e135a77debe86834c25d1fa04fab8f7ef205b2c66f0245625c64d2104a508b0cf5a1b5fe24d0d56f7ec07ccaec6ab857e1948ebd886ad7512b3927ca4257fcd7f7a804bc858af65201c6bb9c545564215afb3fbab4b0052d45528a3e609da298f392ad5b9664aa29f50c36e488640eaa2085bf67c3db428efba838fb1715a930f24b052ad5a4d75c0ff1f7aa607fcddfcbbabc3dd302b482dd68cc761bf9cf96779c66a1a9647d366a4b73d37e0f82c308ff6b5cfbec03ac60e7127693a2c71edbdd39619023b60a03c38b0b0443d8ae3e333aa61283eef164c8df2c7742edc52db993d2736302c55c9db608b7e83987fa036313be10c720a509ec47908078c95143f334dc4e9f927dbc8dcab0a7aca1c7d0c6042a25a60acc6273faeb3690c064eb7b8f5546e352b982210030b4512e5cbc9fcc26497607c35de5633a027a1ae8af774e76c1e39a4a84e5cfbaf01496bd87319d28fecb465e75c5355e43c14258863c01ce64c31b4c10d66009a06e6fd203622df29d5ce820c443017f0184667c364fa40f3f6a419bb3712dd26df2efa7fa78634aa244ff8e4977521bab1bcf003ba81a05e2cff44e4725a44d0166562a9bef7412410fda59084d9386ad494ef1d4cc7bdea4377c476854a48a58473b9243ffa147ebdbf51ab72fe5fcf1667db62814a9e4198ab1c1422eb3fabb28b32eaba7488305c91cdcb1243404b9b9b2bad1a721a23f2eb2519ba3593e6dc4d2e00b75e70690196b4846945913a38b2ef646cd8a59ff9556ef58e92dab798d686879fc143ba079934e55ec9d55f122176fdf0bc9ff47dbef0567d7da7afa05b11a4c2a16443f57c323f0f9c15998d6a6f82200945f030b7e3b9f7cdcfef1fa1c1b20a806d0a3e82b5fc5e1ed101e4fdaaae5309b332fb5b0ac9d3c90ddb4452b74d48014c12adeeaf2d6f3d841b3f74100aafe99e54c196806dd239087e35cd8d13e49b3cfae36622de06650584b45c7e1bab7fdc6ea1818bfa191fe8d0188d2eccf3a7bab8febb5c2fab47f6ae6187d27be9b878a06f48e3fa3d8ba76e0d2028b3eb7b57a0b73d2ba62d4cb8a55f98adea0bf130487a9414499e96229e7975efac8ab1d6625e8e98e70ddc8581b82c887d357c3c0b15c4b3da484c4089049c590d0ac606c4336cebaaf4fe46887bda9bef521b8900675c369b3622b7ef2b67a9365437ea951011a19e87cdbf5e9d5e120f3cbc3e4b38f01191dc89b10c8f81f1e3c36d086fd902edaa494d40e0c671c37005410f3c2ccaae0abfbf57b6984fba26062f2ccfaa7255541c5bebfe3eb81b954732373662aeab65e5088cdaff0b3822cb0f47e2ba168c306f8f05954df73f30f9a83999211e478893bd2d840e510a69d9af3e4988a0405beb21d1eacb167869c32402e780ebd0758aeeff016eb15abf8dadaf48ef820f5b049d7c7b1fdfed9cf971527273109ae6cbcec9730243038702f9dcceb268724e914ba46354c218e0e227f410e569e136227bbaab596d9442283a769230e26c674c647a9bf54c5b3dba199f8fd056d59e985a12471c0c7d1df55889a3b4fb0487f81ce2c8c9a2709df9258c84073b8025e6f877fcbe0f082e0dcf833d407b83b0d9fafc1f55712966c2e91da11469a51294b6e994af5b5c62d903e958316b5b0878fb1dd1cb6ef6048adfc8016e4928f20f272ba8a5ffd30b5d8b483da1e8f17d27e85dcb18d3299e66e3c4909b9faf501026d2fb3d8163922b893cd7aa9f3e7b1ecee4fa34bc59f9f62b43baa296c091e400c532a83c76c7a8d38cfdcd5bea5ea6a891bba8483fa7cf8f71920420952c8035b6d036f16e61a99f0357af07b48c4ae96d9b6d419cdc2e09474d7bef4cc811f4df5fee3e1021bdc021dc0d24f1f93174f865550b23c53c5291bc71ff9f1109333413147515839ecd1ba61a48d743b16084bcf5a35b578f7699fe689fb479551c1a0cfa1e67a651cf72e90a3ef07fa14bc2f0684d8f2b713e371ca1d96e933a1634774430b87c8d3c3e9b781345cd780b4cdfe1830fa344eda3cb1762ec7ef4675da438768e60e1c8d2bc0660ea9b1efa9ef1a3854f166fcbe3e054c0af12cab5d8d08d8c06de0569935fc18c0dc87264888bf65254ba91b84e8c831a60276b90867fc5afba38517be481446b974e0f70e56efeaef720c5064c119f09d22707eee560fa914c4e0fe8b94fccb7aa02e48662412a0b1db6382604744dcd62f6118aecf686d0befcca7fe896a88c18375f999040c4bf4fb393a42742899fb129b3ff7014584344fb6c793ed274f65070b6e61d0e5edc05f45fdf4adce3fe790a2d52c43fc5d928f1cda2283d360f93898a86958708c352f34525945539dae6ee0a6fd0c213f5bf5b1cfebe773841630969c5e39f9c1c5bbe1a6510ff7a842ca92ae1e6704f1965441be9043208cef0942ef9ceaab81efbe1270ecf70a3fc80dc8ac7f334821b148daaffa9a50127a7167ac9d77ba1fe5e7082cf3115989fa6172e936fc487dafc997dedb5ddc803767bc77d102a4aeeee2360b058f0c8255a65deffb76534c2d806ab0cfd252364131d0725606b375faf73582ee8d14737a566539855cfc0a349e7960cef00f656872e02ae16c0715ebdc788d542771b5ef484015423fa50a5dbc1ddc4827d360ac7b126b0214c800f1dab8dc18c74d276d858a4d634310d13f4a3438c08384e2cf1b36274d60921decd29bbc570c0cbd74567467398093917e31c984bac2f6e15fd26f8c9f7f94b1d81500ae0a61b9aa9605de2b1f4a30d77c57295a65370984d154e24e71e809357cea73dfa9c6d83d38d497cf0234ec3471ab70f0c85a960f41827a071d12041dcfa68257084cf71ea743e9b78073c34a94602acb9b170f22e76838606dfacd68eb5188d4a1296934a7892e23743e5c4ee0d55836434c4991b3dfb7e8f42eaff1c01210b06c3fd0004eb54eb5c00b846374371e8b8a2456a7094afc8d8050d6bcd8305c81929ff83efcbe090edd293d70aea9da75dc211bc1404f725dcce50576eea5979dfd0cbcf4849148f5f8c2a3924ac29de6c08c1ff9a4ed19cb137cde2829e236f0dcdb1bc2782ed0c149ff19adbe3f4b0de4af37d4745977ab5e213843f93daf33876873d292e7f68f860f2a6d25b02e33cc931b952e03536239d6ed9864c78f7a2427554900244a0145c64faca12f82b88cc8c68f9222d550e41a41763cd95113edee89a52fb8372c705a8a3419993cf209b0ba093ed058de524345634c832c82b4697872bc312ac5a0fa773ea6b8821f31b5c254d82ed35d3942107cdd83b42d18e4878847e8c9f2eb9bb224214f6b5a7e829b9c7450b31498019b4df39be9da79889add79a251ea51a946de86d7f89cfb96bcc73ec8ec1a7a5ed6fcddd4649b2dace4d4b7ca4307452a417b28dbc2b26b6d16f26f7c3327ebfb99337d944656b504e155345b22f3512ce944a98a7d5931d7ef02378bd7c6bd502061e7a8970edf5a828e8c44de34103e1364fb0a091488722f07a1dbb16360c3c89f0da2c005db8194034d46b2f14ed13d0da9a716ad7b6c6d4559bb6d499da21b028a2a3f8d552ecc3b970d92881a80729c5a78af14981684dfd3770b8b1aca20c9f56371dc8796ad11024d54330318b1d7b27197946c1d7209d3298d97071ae89108f1cc7d86e1ed17f9c76c193f5761429ea73112db47f1d2fd470ff7ada0ca76abf9970c7f3a56b951a372937293fde03b57031ab36a18783cc7c0df1a4593904998f10ca465d217a025b10acd6a7151d9a344fff87cfcbdfcde6f925c0986825ac9518cce14eaea9befb210809738689d0115235e3faa7e66dc69c56c3f82fb81e4d163258fb086fae854385e7f17d10923684b6963a6b9c03e1a02b3ffebd1c22afa3c815def1459ad5d86fecc51d7c64dfd85ea2f1b1d9a845ef90709c8e69f31ec520e066fea9c78fe97bb2eabda71b1bc5531887d993e170588c4ece3196de95d9fc6e99df68eaa9b06847f92d3ba3df98acd2df62c27fbedac1b112064575f968a4491e1d0534293ee02807e5cd8c8fefe8ff7ccf8778f2363d1c7bd9c154b7169afcac068ecadf0449c7d282a0f4b4cd500e2505759b0df1655a2cab6bc92d29e126cfa6656069a211d1e9454153b715f83d5d3e383bd0bd11e1e8b3d98fde2f24378a65b293045f67b09e3feee046f5183853e2dfd016d644527f528392473f833938ec5136e972cda6449b459ce62e92a88d840501aa30b038e843d67330d8f85ee64bfcc29110a71f99ae0b15968f37fb92a816dc904d1347ba56e137f5e1619d7c4c67b7ea7b4da6f8fda8b7e14ffb965ea91c8305757095ed5d755a215625c9f725070b8f54168a374ee1938739fc0df099019d2468ad424bd27f5e98f85e681a162aa00edbadd44cde4ea4ba8b95a5398a14fa3c0eda1f47f2465c1317743eed4879662ce0be16156981dad15"

IV = bytes.fromhex(cipher)[:16]
aes = AES.new(key, AES.MODE_CBC, IV)
msg = aes.decrypt(binascii.unhexlify(cipher[32:]))
message = val_to_string(int(binascii.hexlify(msg), 16))

IV2 = bytes.fromhex(cipher_two)[:16]
aes2 = AES.new(key2, AES.MODE_CBC, IV2)
msg2 = aes2.decrypt(binascii.unhexlify(cipher_two[32:]))
message2 = val_to_string(int(binascii.hexlify(msg2), 16))

message2 = "-" + message2[1:]
print("FLAG1:", message[:-29])
print("")
print(message2[:-21])

